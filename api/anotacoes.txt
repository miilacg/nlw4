* Para instalar o yarn rodar o comando 'npm install -g yarn'. 
Se der erro rode 'Set-ExecutionPolicy RemoteSigned' com o VS Code aberto como adm.

* Para inicializar o yarn => yarn init -y
O -y indica que a inicialização será feita com as configurações padrões.

* Para adicionar a dependencia express => yarn add express

* Para adicionar as tipagens do express que ficam em uma bbt externa => yarn add @types/express -D
O -D é para indicar que é para instalar apenas em desenvolvimento.

* Para instalar o typescrip rodar o comando 'yarn add typescript -D'. 

* Para inicializar o TypeScrip na aplicação => yarn tsc --init

* Para converter o codigo em TS para JS em tempo de execução, 
executar o comando 'yarn add ts-node-dev' para instalar a dependencia

* Para instalar o TypeORM e o reflect-metadata => yarn add typeorm reflect-metadata
O ORM pega a classe dentro do projeto (entidade) e ele consegue mapear a classe para um tabela especifica do BD

* Para instalar o SQLite => yarn add sqlite3
O SQLite é como se fosse um bd em memoria, então não precisa instalar nenhum bd na maquina
Para produção não se usa ele

* Para criar uma migrate => yarn typeorm migration:create -n nomeDaMigration
A migration é como se fosse um historico do que está sendo feito em relação ao bd

* Para rodar a migrate => yarn typeorm migration:run

* Para instalar as ferramentas para os testes automatizados e as dependencias => yarn add jest @types/jest -D 

* Para criar o arquivo de configuração do jest => yarn jest --init
y y node n v8 y

* BBT para trabalhar com TS dentro dos testes => yarn add ts-jest  @types/jest  -D

* Para rodar os testes => yarn test

* yarn add supertext @types/supertest -D

* Modulo para permitir o envio de email => yarn add nodemailer @types/nodemailer -D

* Para rodar o projeto => yarn 

* Personalizar o template => yarn add handlebars 

* "posttest": "rimraf ./src/database/database.test.sqlite" /* exclui o bd depois do teste */

* "test": "cross-env NODE_ENV=test jest -i" /* o -i é pra um teste rodar depois do outro */

------------------------------------------------------------------------------

* Toda configurações do TypeScript é feita dentro do arquivo tsconfig

------------------------------------------------------------------------------

Testes automatizados

1 - Testes unitários
Geralmente é utilizado quando ta fazendo o TDD (quando a gente começa o codigo orientado a testes).
O teste nunca é feito fazendo acesso ao BD e nem a APIs externas.

2 - Testes de integração
Testa a funcionalidade completa da integração. Testa todo o fluxo
-> request -> routes -> controller -> repository
<- repository <- controller <- response

3 - Testes ponta a ponta
Testa toda a ação do usuário em uma aplicação.
Mais utilizado quando está trabalhando com aplicações front-end